{"version":3,"sources":["components/base/item-card.js"],"names":["bindCardSlider","sliderNode","classList","contains","Swiper","pagination","el","clickable","bindLikeBtn","btnNode","id","favHeaderBtn","document","querySelector","addEventListener","e","preventDefault","target","fetch","then","resp","json","success","Error","remove","undefined","count","isNaN","setAttribute","String","currentItem","closest","catch","err","console","log","add","bindCompareBtn","headerCompareBtn","bindCartBtn","name","headerBasketBtn","Fancybox","show","src","type","bindItemCard","itemCardNode","itemId","getAttribute","innerText","cartBtn","querySelectorAll","bindSearchTabs","node","map","btn","window","cardItemNode"],"mappings":"AAAA,MAAAA,eAAAC,MACAA,MAAAC,UAAAC,SAAA,aAIAC,OACA,IAAAA,OAAAH,EAAA,CACAI,WAAA,CACAC,GAAA,qBAAAC,WAAA,UAHA,GASAC,YAAA,CAAAC,EAAAC,KACA,IAAAD,IAAAC,EACA,SAGA,MAAAC,EAAAC,SAAAC,cAAA,iCAEAJ,EAAAK,iBAAA,SAAAC,IACAA,EAAAC,iBAEAD,EAAAE,OAAAf,UAAAC,SAAA,yBACAe,MAAA,0BAAAR,cACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAmBA,UAAAC,MAAA,qDAlBAR,EAAAE,OAAAf,UAAAsB,OAAA,8BACAC,IAAAL,EAAAM,OAAAf,IACAgB,MAAAP,EAAAM,QACAf,EAAAiB,aAAA,aAAAC,OAAAT,EAAAM,SAMA,GAFAd,SAAAC,cAAA,sBAEA,CACA,MAAAiB,EAAAf,EAAAE,OAAAc,QAAA,kBAEAD,GACAA,EAAAN,QAEA,CAIA,IAEAQ,OAAAC,IACAC,QAAAC,IAAAF,EAAA,IAGAf,MAAA,0BAAAR,KACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAQA,UAAAC,MAAA,sDAPAR,EAAAE,OAAAf,UAAAkC,IAAA,8BACAX,IAAAL,EAAAM,OAAAf,IACAgB,MAAAP,EAAAM,QACAf,EAAAiB,aAAA,aAAAC,OAAAT,EAAAM,QAKA,IAEAM,OAAAC,IACAC,QAAAC,IAAAF,EAAA,GAEA,GACA,EAGAI,eAAA,CAAA5B,EAAAC,KACA,IAAAD,IAAAC,EACA,SAGA,MAAA4B,EAAA1B,SAAAC,cAAA,+BAEAJ,EAAAK,iBAAA,SAAAC,IACAA,EAAAC,iBAEAD,EAAAE,OAAAf,UAAAC,SAAA,+BACAe,MAAA,wBAAAR,cACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAMA,UAAAC,MAAA,iDALAR,EAAAE,OAAAf,UAAAsB,OAAA,oCACAC,IAAAL,EAAAM,OAAAY,IAAAX,MAAAP,EAAAM,QACAY,EAAAV,aAAA,aAAAC,OAAAT,EAAAM,OAIA,IAEAM,OAAAC,IACAC,QAAAC,IAAAF,EAAA,IAIAf,MAAA,wBAAAR,KACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAMA,UAAAC,MAAA,kDALAR,EAAAE,OAAAf,UAAAkC,IAAA,oCACAX,IAAAL,EAAAM,OAAAY,IAAAX,MAAAP,EAAAM,QACAY,EAAAV,aAAA,aAAAC,OAAAT,EAAAM,OAIA,IAEAM,OAAAC,IACAC,QAAAC,IAAAF,EAAA,GAEA,GACA,EAGAM,YAAA,CAAA9B,EAAAC,EAAA8B,KACA,IAAA/B,IAAAC,EACA,SAGA,MAAA+B,EAAA7B,SAAAC,cAAA,8BAEAJ,EAAAK,iBAAA,SAAAC,IACAA,EAAAC,iBAEAD,EAAAE,OAAAf,UAAAC,SAAA,2BAEAe,MAAA,uBAAAR,cACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAQA,UAAAC,MAAA,+CAPAR,EAAAE,OAAAf,UAAAsB,OAAA,gCACAC,IAAAL,EAAAM,OAAAe,IACAd,MAAAP,EAAAM,QACAe,EAAAb,aAAA,aAAAC,OAAAT,EAAAM,QAKA,IAEAM,OAAAC,IACAC,QAAAC,IAAAF,EAAA,IAIAf,MAAA,uBAAAR,oBACAS,MAAAC,KAAAC,SACAF,MAAAC,IACA,IAAAA,EAAAE,QAiBA,UAAAC,MAAA,gDAhBAR,EAAAE,OAAAf,UAAAkC,IAAA,2BACAM,SAAAC,KAAA,EACAC,IAAA,yDACAJ,4NAKAK,KAAA,eAEApB,IAAAL,EAAAM,OAAAe,IACAd,MAAAP,EAAAM,QACAe,EAAAb,aAAA,aAAAC,OAAAT,EAAAM,QAKA,IAEAM,OAAAC,IACAC,QAAAC,IAAAF,EAAA,GAEA,GACA,EAGAa,aAAAC,IACA,IAAAA,EACA,SAGA,MAAAC,EAAAD,EAAAE,aAAA,gBAQA,IAAAT,EANAxC,eAAA+C,EAAAlC,cAAA,YAEAL,YAAAuC,EAAAlC,cAAA,sBAAAmC,GAEAX,eAAAU,EAAAlC,cAAA,yBAAAmC,GAOAR,EAHAO,EAAA7C,UAAAC,SAAA,QAGAS,SAAAC,cAAA,uBAAAqC,UAFAH,EAAAlC,cAAA,oBAAAqC,UAKA,UAAAC,KAAAJ,EAAAK,iBAAA,sBACAb,YAAAY,EAAAH,EAAAR,EACA,EA7MAa,eAAAC,IACA,IAAAA,EACA,SAGA,IAAAA,EAAAF,iBAAA,yBAEAG,KAAAC,IACAA,EAAA1C,iBAAA,SAAAC,IACAA,EAAAC,iBAEAsC,EAAAzC,cAAA,gCACAyC,EAAAzC,cAAA,+BAAAX,UAAAsB,OAAA,8BAEAgC,EAAAtD,UAAAkC,IAAA,8BAEAkB,EAAAzC,cAAA,iCACAyC,EAAAzC,cAAA,gCAAAX,UAAAsB,OAAA,+BAEA8B,EAAAzC,cAAA2C,EAAAP,aAAA,SAAA/C,UAAAkC,IAAA,iCACA,GACA,EAGAqB,OAAA3C,iBAAA,yBACAuC,eAAAzC,SAAAC,cAAA,iBAEA,UAAA6C,KAAA9C,SAAAwC,iBAAA,cACAN,aAAAY,EACA","file":"search.min.js","sourcesContent":["const bindCardSlider = (sliderNode) => {\n    if (!sliderNode || !sliderNode.classList.contains('swiper')) {\n        return false;\n    }\n\n    if (!!Swiper) {\n        return new Swiper(sliderNode, {\n            pagination: {\n                el: \".swiper-pagination\", clickable: true,\n            },\n        })\n    }\n}\n\nconst bindLikeBtn = (btnNode, id) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const favHeaderBtn = document.querySelector('.headerActions__btn_favorites')\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__like_liked')) {\n            fetch(`/ajax/favorites.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__like_liked');\n                        if (resp.count !== undefined && favHeaderBtn) {\n                            if (!isNaN(resp.count)) {\n                                favHeaderBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n\n                        const isFav = document.querySelector('.catalog_favorites')\n\n                        if (isFav) {\n                            const currentItem = e.target.closest('.catalog__item');\n\n                            if (currentItem) {\n                                currentItem.remove()\n                            }\n                        }\n\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из понравившихся')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n            fetch(`/ajax/favorites.php?id=${id}`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__like_liked');\n                        if (resp.count !== undefined && favHeaderBtn) {\n                            if (!isNaN(resp.count)) {\n                                favHeaderBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в понравившиеся')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindCompareBtn = (btnNode, id) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const headerCompareBtn = document.querySelector('.headerActions__btn_compare');\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__compare_compared')) {\n            fetch(`/ajax/compare.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__compare_compared')\n                        if (resp.count !== undefined && headerCompareBtn && !isNaN(resp.count)) {\n                            headerCompareBtn.setAttribute('data-count', String(resp.count))\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из сравнения')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n            //todo: здесь вставить запрос на добавление в сравнение\n            fetch(`/ajax/compare.php?id=${id}`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__compare_compared')\n                        if (resp.count !== undefined && headerCompareBtn && !isNaN(resp.count)) {\n                            headerCompareBtn.setAttribute('data-count', String(resp.count))\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в сравнение')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindCartBtn = (btnNode, id, name) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const headerBasketBtn = document.querySelector('.headerActions__btn_basket');\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__cart_in-cart')) {\n\n            fetch(`/ajax/basket.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__cart_in-cart');\n                        if (resp.count !== undefined && headerBasketBtn) {\n                            if (!isNaN(resp.count)) {\n                                headerBasketBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из корзины')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n\n            fetch(`/ajax/basket.php?id=${id}&count=1&json=1`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__cart_in-cart');\n                        Fancybox.show([{\n                            src: `<div class=\"modal-cart-confirmation\">\n<div>Товар <b>\"${name}\"</b> добавлен в корзину.</div>\n<div class=\"modal-cart-confirmation__buttons\">\n<a href=\"/basket/\">Перейти в корзину</a>\n<div class=\"is-close-btn\" onclick=\"Fancybox.close()\">Продолжить покупки</div>\n</div>\n</div>`, type: \"html\",\n                        },]);\n                        if (resp.count !== undefined && headerBasketBtn) {\n                            if (!isNaN(resp.count)) {\n                                headerBasketBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в корзину')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindItemCard = (itemCardNode) => {\n    if (!itemCardNode) {\n        return false;\n    }\n\n    const itemId = itemCardNode.getAttribute('data-item-id');\n\n    bindCardSlider(itemCardNode.querySelector('.swiper'));\n\n    bindLikeBtn(itemCardNode.querySelector('.js-item-card-like'), itemId);\n\n    bindCompareBtn(itemCardNode.querySelector('.js-item-card-compare'), itemId);\n\n    let name\n\n    if(!itemCardNode.classList.contains('card')){\n        name = itemCardNode.querySelector('.item-card__name').innerText;\n    }else{\n        name = document.querySelector('.page-title_card h1').innerText;\n    }\n\n    for (const cartBtn of itemCardNode.querySelectorAll('.js-item-card-cart')) {\n        bindCartBtn(cartBtn, itemId, name)\n    }\n\n}"]}