{"version":3,"file":"contacts.min.js","names":["bindContactsTabs","node","querySelectorAll","map","btn","addEventListener","e","preventDefault","querySelector","classList","remove","add","getAttribute","bindFeedbackForm","formNode","phoneInput","Inputmask","mask","showMaskOnHover","messageNode","initialMessage","innerHTML","fetch","method","body","FormData","then","resp","json","success","setAttribute","setTimeout","Fancybox","close","removeAttribute","reset","catch","window","document","bind"],"sources":["helpers/collapseText.js","components/base/item-card.js"],"sourcesContent":["const collapseChildItems = function (selector, setOptions) {\n    if (!selector) {\n        return false;\n    }\n\n    const blocks = document.querySelectorAll(selector + ':not(.collapseElement)');\n\n    console.log(blocks)\n\n    const options = {\n        children: setOptions.children || '*',                   // html selector (string)\n        targetHeight: setOptions.targetHeight || null,          // height block (number)\n        targetCount: setOptions.targetCount || null,            // count childrens (number)\n        reduceHeight: setOptions.reduceHeight || 0,             // value reduce height (number)\n        buttonClass: setOptions.buttonClass || '',              // button (string)\n        buttonMore: setOptions.buttonMore || 'Смотреть еще',    // button (string)\n        buttonLess: setOptions.buttonLess || 'Скрыть',          // button (string)\n    }\n\n    if (!blocks[0]) return false;\n\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        if (options.targetHeight !== null) {\n            initCollapseHeight(block);\n            initEvents(block, 'height');\n        } else if (options.targetCount !== null) {\n            initCollapseItems(block);\n            initEvents(block, 'count');\n        }\n    }\n\n    function initCollapseHeight(block) {\n        const blockHeight = block.offsetHeight;\n\n        if (blockHeight > options.targetHeight) {\n            htmlStructure(block, 'collapseElement_height');\n\n            block.querySelector('[data-collapse-element-wrap]').style.height = options.targetHeight - options.reduceHeight + 'px';\n        }\n    }\n\n    function initCollapseItems(block) {\n        if (block.querySelectorAll(options.children).length > options.targetCount) {\n            htmlStructure(block);\n\n            const childrens = block.querySelectorAll(options.children); // !!! important after fn htmlStructure\n\n            for (let i = 0; i < childrens.length; i++) {\n                if (i + 1 > options.targetCount) {\n                    childrens[i].classList.add('collapseElement__hidden');\n                }\n            }\n        }\n    }\n\n    function htmlStructure(block, addClass) {\n        block.classList.add('collapseElement', 'collapseElement_hide');\n        addClass && block.classList.add(addClass);\n        block.innerHTML = htmlContent(block);\n    }\n\n    function htmlContent(block) {\n        const content = '<div class=\"collapseElement__content\" data-collapse-element-content>' + block.innerHTML + '</div>';\n        const button = '<button class=\"collapseElement__button ' + options.buttonClass + '\" type=\"button\" data-collapse-element-button><span>' + options.buttonMore + '</span><span>' + options.buttonLess + '</span></button>';\n        const newContent = '<div class=\"collapseElement__wrap\" data-collapse-element-wrap>' + content + '</div>' + button;\n\n        return newContent;\n    }\n\n    function initEvents(block, action) {\n        const button = block.querySelector('[data-collapse-element-button]');\n\n        button && button.addEventListener('click', function (e) {\n            e.preventDefault();\n            if (block.classList.contains('collapseElement_hide')) {\n                block.classList.remove('collapseElement_hide');\n                if (action === 'height') {\n                    const wrap = block.querySelector('[data-collapse-element-wrap]');\n                    const contentHeight = block.querySelector('[data-collapse-element-content]').offsetHeight;\n                    wrap.style.height = contentHeight + 'px';\n                    setTimeout(function () {\n                        wrap.style.height = 'auto';\n                    }, 200);\n                }\n            } else {\n                block.classList.add('collapseElement_hide');\n                if (action === 'height') {\n                    const wrap = block.querySelector('[data-collapse-element-wrap]');\n                    const wrapHeight = wrap.offsetHeight;\n                    wrap.style.height = wrapHeight + 'px';\n                    setTimeout(function () {\n                        wrap.style.height = options.targetHeight - options.reduceHeight + 'px';\n                    }, 0)\n                }\n            }\n        });\n    }\n}","const bindCardSlider = (sliderNode) => {\n    if (!sliderNode || !sliderNode.classList.contains('swiper')) {\n        return false;\n    }\n\n    if (!!Swiper) {\n        return new Swiper(sliderNode, {\n            pagination: {\n                el: \".swiper-pagination\", clickable: true,\n            },\n        })\n    }\n}\n\nconst bindLikeBtn = (btnNode, id) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const favHeaderBtn = document.querySelector('.headerActions__btn_favorites')\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__like_liked')) {\n            fetch(`/ajax/favorites.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__like_liked');\n                        if (resp.count !== undefined && favHeaderBtn) {\n                            if (!isNaN(resp.count)) {\n                                favHeaderBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n\n                        const isFav = document.querySelector('.catalog_favorites')\n\n                        if (isFav) {\n                            const currentItem = e.target.closest('.catalog__item');\n\n                            if (currentItem) {\n                                currentItem.remove()\n                            }\n                        }\n\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из понравившихся')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n            fetch(`/ajax/favorites.php?id=${id}`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__like_liked');\n                        if (resp.count !== undefined && favHeaderBtn) {\n                            if (!isNaN(resp.count)) {\n                                favHeaderBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в понравившиеся')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindCompareBtn = (btnNode, id) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const headerCompareBtn = document.querySelector('.headerActions__btn_compare');\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__compare_compared')) {\n            fetch(`/ajax/compare.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__compare_compared')\n                        if (resp.count !== undefined && headerCompareBtn && !isNaN(resp.count)) {\n                            headerCompareBtn.setAttribute('data-count', String(resp.count))\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из сравнения')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n            //todo: здесь вставить запрос на добавление в сравнение\n            fetch(`/ajax/compare.php?id=${id}`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__compare_compared')\n                        if (resp.count !== undefined && headerCompareBtn && !isNaN(resp.count)) {\n                            headerCompareBtn.setAttribute('data-count', String(resp.count))\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в сравнение')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindCartBtn = (btnNode, id, name) => {\n    if (!btnNode || !id) {\n        return false;\n    }\n\n    const headerBasketBtn = document.querySelector('.headerActions__btn_basket');\n\n    btnNode.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (e.target.classList.contains('item-card__cart_in-cart')) {\n\n            fetch(`/ajax/basket.php?id=${id}&delete=Y`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.remove('item-card__cart_in-cart');\n                        if (resp.count !== undefined && headerBasketBtn) {\n                            if (!isNaN(resp.count)) {\n                                headerBasketBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка удаления товара из корзины')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        } else {\n\n            fetch(`/ajax/basket.php?id=${id}&count=1&json=1`)\n                .then((resp) => resp.json())\n                .then((resp) => {\n                    if (resp.success) {\n                        e.target.classList.add('item-card__cart_in-cart');\n                        Fancybox.show([{\n                            src: `<div class=\"modal-cart-confirmation\">\n<div>Товар <b>\"${name}\"</b> добавлен в корзину.</div>\n<div class=\"modal-cart-confirmation__buttons\">\n<a href=\"/basket/\">Перейти в корзину</a>\n<div class=\"is-close-btn\" onclick=\"Fancybox.close()\">Продолжить покупки</div>\n</div>\n</div>`, type: \"html\",\n                        },]);\n                        if (resp.count !== undefined && headerBasketBtn) {\n                            if (!isNaN(resp.count)) {\n                                headerBasketBtn.setAttribute('data-count', String(resp.count))\n                            }\n                        }\n                    } else {\n                        throw new Error('Серверная ошибка добавления товара в корзину')\n                    }\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n        }\n    })\n}\n\nconst bindItemCard = (itemCardNode) => {\n    if (!itemCardNode) {\n        return false;\n    }\n\n    const itemId = itemCardNode.getAttribute('data-item-id');\n\n    bindCardSlider(itemCardNode.querySelector('.swiper'));\n\n    bindLikeBtn(itemCardNode.querySelector('.js-item-card-like'), itemId);\n\n    bindCompareBtn(itemCardNode.querySelector('.js-item-card-compare'), itemId);\n\n    let name\n\n    if(!itemCardNode.classList.contains('card')){\n        name = itemCardNode.querySelector('.item-card__name').innerText;\n    }else{\n        name = document.querySelector('.page-title_card h1').innerText;\n    }\n\n    for (const cartBtn of itemCardNode.querySelectorAll('.js-item-card-cart')) {\n        bindCartBtn(cartBtn, itemId, name)\n    }\n\n}"],"mappings":"AAAA,MAAAA,iBAAAC,IACA,IAAAA,EACA,SAGA,IAAAA,EAAAC,iBAAA,2BAEAC,KAAAC,IACAA,EAAAC,iBAAA,SAAAC,IACAA,EAAAC,iBAEAN,EAAAO,cAAA,kCACAP,EAAAO,cAAA,iCAAAC,UAAAC,OAAA,gCAEAN,EAAAK,UAAAE,IAAA,gCAEAV,EAAAO,cAAA,mCACAP,EAAAO,cAAA,kCAAAC,UAAAC,OAAA,iCAEAT,EAAAO,cAAAJ,EAAAQ,aAAA,SAAAH,UAAAE,IAAA,mCACA,IAGA,IAAAV,EAAAC,iBAAA,sCAEAC,KAAAC,IACAA,EAAAC,iBAAA,SAAAC,IACAA,EAAAC,iBAEAN,EAAAO,cAAA,6CACAP,EAAAO,cAAA,4CAAAC,UAAAC,OAAA,2CAEAN,EAAAK,UAAAE,IAAA,2CAEAV,EAAAO,cAAA,8CACAP,EAAAO,cAAA,6CAAAC,UAAAC,OAAA,4CAEAT,EAAAO,cAAAJ,EAAAQ,aAAA,SAAAH,UAAAE,IAAA,8CACA,GACA,EAGAE,iBAAAC,IACA,IAAAA,EACA,SAGA,UAAAC,KAAAD,EAAAZ,iBAAA,qBACAc,WACAA,UAAA,CAAAC,KAAA,uCAAAC,iBAAA,IAAAD,KAAAF,GAIA,MAAAI,EAAAL,EAAAN,cAAA,oBACAY,EAAAD,EAAAE,UAEAP,EAAAT,iBAAA,UAAAC,IACAA,EAAAC,iBAEAe,MAAAR,EAAAF,aAAA,WACAW,OAAA,OACAC,KAAA,IAAAC,SAAAX,KACAY,MAAAC,KAAAC,SACAF,MAAA,EAAAG,cACAA,GAEAV,EAAAE,UAAA,wBACAP,EAAAN,cAAA,mBAAAsB,aAAA,uBAEAC,YAAA,KACAZ,EAAAE,UAAAD,EACAY,SAAAC,OAAA,GACAnB,EAAAN,cAAA,mBAAA0B,gBAAA,cACA,KAEApB,EAAAqB,UAEAhB,EAAAE,UAAA,8DAEAU,YAAA,KACAZ,EAAAE,UAAAD,CAAA,GACA,MACA,IACAgB,OAAA,KACAjB,EAAAE,UAAA,8DAEAU,YAAA,KACAZ,EAAAE,UAAAD,CAAA,GACA,QACA,GACA,EAKAiB,OAAAhC,iBAAA,yBACAL,iBAAAsC,SAAA9B,cAAA,mBAEAwB,SAAAO,KAAA,sBCjGA,UAAAzB,KAAAwB,SAAApC,iBAAA,kBACAW,iBAAAC,EACA"}